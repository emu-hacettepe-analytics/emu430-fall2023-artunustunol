all_ratings <- unlist(ratings_list)
all_ratings
# Her URL'den çekilen ratings'ları birleştir
all_ratings <- unlist(ratings_list)
ratings_cleaned <- c()
for (x in all_ratings) {
rating_elements <- sub("^([0-9]\\.[0-9]).*$", "\\1", x)
ratings_cleaned <- c(ratings_cleaned, rating_elements)
}
ratings_cleaned
ratings_integer <- as.numeric(ratings_cleaned)
ratings_integer
ratings_cleaned_integer <- as.numeric(ratings_cleaned)
ratings_cleaned_integer
votes_list <- lapply(urls, function(url) {
page <- read_html(url, encoding = "UTF-8")  # UTF-8 kodlaması kullanılıyor
votes_nodes <- html_nodes(page, '.sc-53c98e73-0.kRnqtn')  # Votes için CSS seçicisi
votes <- html_text(votes_nodes)
return(votes)
votes
votes_list
all_votes <- unlist(votes_list)
all_votes
votes_list <- lapply(urls, function(url) {
page <- read_html(url, encoding = "UTF-8")  # UTF-8 kodlaması kullanılıyor
votes_nodes <- html_nodes(page, '.sc-53c98e73-0.kRnqtn')  # Votes için CSS seçicisi
votes <- html_text(votes_nodes)
return(votes)
votes_list <- lapply(urls, function(url) {
page <- read_html(url, encoding = "UTF-8")  # UTF-8 kodlaması kullanılıyor
votes_nodes <- html_nodes(page, '.sc-53c98e73-0.kRnqtn')  # Votes için CSS seçicisi
votes <- html_text(votes_nodes)
return(votes)
})
library(tidyverse)
library(rvest)
library(stringr)
library(scales)
library(dplyr)
library(rvest)
votes_list <- lapply(urls, function(url) {
page <- read_html(url, encoding = "UTF-8")  # UTF-8 kodlaması kullanılıyor
votes_nodes <- html_nodes(page, '.sc-53c98e73-0.kRnqtn')  # Votes için CSS seçicisi
votes <- html_text(votes_nodes)
return(votes)
})
all_votes <- unlist(votes_list)
all_votes
votes_cleaned <- as.numeric(sapply(vote_list, function(x) {
numeric_value <- gsub("Votes|,", "", x)
}))
votes_cleaned <- as.numeric(sapply(all_votes, function(x) {
numeric_value <- gsub("Votes|,", "", x)
}))
head(votes_cleaned)
votes
votes_cleaned
final_data <- data.frame(Title = all_titles_cleaned,
Year = years_cleaned,
Duration = durations_converted,
Rating = ratings_cleaned_integer,
Vote = votes_cleaned)
final_data
summary(final_data)
Final_data_rated <- final_data[order(final_data$Rating, TRUE)]
Final_data_rated <- final_data[order(final_data$Rating, decreasing = TRUE)]
final_data[order(final_data$Rating, decreasing = TRUE)]
library(tidyverse)
library(rvest)
library(stringr)
library(scales)
library(dplyr)
library(rvest)
# URL'leri içeren vektör
urls <- c("https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-03-11&num_votes=2500,&country_of_origin=TR&count=250" ,
"https://m.imdb.com/search/title/?title_type=feature&release_date=,2010-01-01&num_votes=2500,&country_of_origin=TR&count=250")
# Her URL için HTML içeriğini oku ve bir listeye kaydet
page <- lapply(urls, function(url) {
read_html(url)
})
# Her URL için HTML içeriğini okuyup, title verilerini çekme
titles_list <- lapply(urls, function(url) {
page <- read_html(url, encoding = "UTF-8")
titles_nodes <- html_nodes(page, '.ipc-title__text')  # Title için CSS seçicisi
titles <- html_text(titles_nodes)
return(titles)
})
# Her URL'den çekilen title'ları birleştir
all_titles <- unlist(titles_list)
all_titles <- all_titles[!grepl("Advanced", all_titles)]
all_titles <- all_titles[!grepl("Recently", all_titles)]
all_titles_cleaned <- c()
for (x in all_titles) {
a <- gsub("^[0-9]+\\.\\s*", "", x)
all_titles_cleaned <- c(all_titles_cleaned, a)
}
years_list <- lapply(urls, function(url) {
page <- read_html(url, encoding = "UTF-8")  # UTF-8 kodlaması kullanılıyor
years_nodes <- html_nodes(page, '.sc-43986a27-8.jHYIIK.dli-title-metadata-item')  # Year için CSS seçicisi
years <- html_text(years_nodes)
return(years)
})
# Her URL'den çekilen year'ları birleştir
all_years <- unlist(years_list)
years_cleaned <- c()
for (a in all_years) {
x <- grep("^[0-9]+$", a, value = TRUE)
years_cleaned <- c(years_cleaned, x)
}
years_cleaned <- as.integer(years_cleaned)
durations_list <- lapply(urls, function(url) {
page <- read_html(url, encoding = "UTF-8")  # UTF-8 kodlaması kullanılıyor
durations_nodes <- html_nodes(page, '.sc-43986a27-8.jHYIIK.dli-title-metadata-item')  # Duration için CSS seçicisi
durations <- html_text(durations_nodes)
return(durations)
})
durations_cleaned <- c()
for (a in durations_list) {
x <- grep("[hm]", a, value = TRUE)
durations_cleaned <- c(durations_cleaned, x)
}
convert_to_minutes <- function(durations_cleaned) {
hours <- as.numeric(str_extract(durations_cleaned, "\\d+(?=h)"))
minutes <- as.numeric(str_extract(durations_cleaned, "\\d+(?=m)"))
if (is.na(hours)) { hours <- 0 }
if (is.na(minutes)) { minutes <- 0 }
total_minutes <- hours * 60 + minutes
return(total_minutes)
}
durations_converted <- c()
for (a in durations_cleaned){
x <- convert_to_minutes(a)
durations_converted <- c(durations_converted, x)
}
ratings_list <- lapply(urls, function(url) {
page <- read_html(url, encoding = "UTF-8")  # UTF-8 kodlaması kullanılıyor
ratings_nodes <- html_nodes(page, '.ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating')  # Ratings için CSS seçicisi
ratings <- html_text(ratings_nodes)
return(ratings)
})
# Her URL'den çekilen ratings'ları birleştir
all_ratings <- unlist(ratings_list)
ratings_cleaned <- c()
for (x in all_ratings) {
rating_elements <- sub("^([0-9]\\.[0-9]).*$", "\\1", x)
ratings_cleaned <- c(ratings_cleaned, rating_elements)
}
ratings_cleaned_integer <- as.numeric(ratings_cleaned)
votes_list <- lapply(urls, function(url) {
page <- read_html(url, encoding = "UTF-8")  # UTF-8 kodlaması kullanılıyor
votes_nodes <- html_nodes(page, '.sc-53c98e73-0.kRnqtn')  # Votes için CSS seçicisi
votes <- html_text(votes_nodes)
return(votes)
})
all_votes <- unlist(votes_list)
votes_cleaned <- as.numeric(sapply(all_votes, function(x) {
numeric_value <- gsub("Votes|,", "", x)
}))
final_data <- data.frame(Title = all_titles_cleaned,
Year = years_cleaned,
Duration = durations_converted,
Rating = ratings_cleaned_integer,
Vote = votes_cleaned)
Final_data_rated <- final_data[order(final_data$Rating, decreasing = TRUE)]
Final_data_rated <- final_data[order(final_data$Rating, decreasing = TRUE)]
final_data_rated <- final_data[order(final_data$Rating, decreasing = TRUE)]
final_data_rated <- final_data[order(final_data$Rating, decreasing = TRUE),]
best_five <- head(final_data_rated)
worst_five <- tail(final_data_rated)
best_five
worst_five
cem_yilmaz_classics <- final_data %>% filter(Title == "G.O.R.A.")
cem_yilmaz_classics
cem_yilmaz_classics <- final_data %>% filter(Title == c("G.O.R.A.","Borç Harç"))
cem_yilmaz_classics
cem_yilmaz_classics
View(cem_yilmaz_classics)
View(final_data)
View(final_data)
View(final_data)
final_data
View(cem_yilmaz_classics)
View(cem_yilmaz_classics)
View(cem_yilmaz_classics)
View(cem_yilmaz_classics)
View(cem_yilmaz_classics)
View(cem_yilmaz_classics)
View(cem_yilmaz_classics)
View(cem_yilmaz_classics)
best_five
final_data
cem_yilmaz_classics <- final_data %>% filter(Title %in% c("G.O.R.A","Av Mevsimi"))
library(tidyverse)
library(rvest)
library(stringr)
library(scales)
library(dplyr)
library(rvest)
cem_yilmaz_classics <- final_data %>% filter(Title %in% c("G.O.R.A","Av Mevsimi"))
cem_yilmaz_classics
cem_yilmaz_classics <- final_data %>% filter(Title %in% c("G.O.R.A"))
cem_yilmaz_classics
cem_yilmaz_classics <- filter(final_data, Title %in% c("G.O.R.A.","Ölümlü Dünya 2","Organize Isler"))
cem_yilmaz_classics
cem_yilmaz_classics <- filter(final_data, Title %in% c("G.O.R.A.","Av Mevsimi"))
cem_yilmaz_classics
final_data
cem_yilmaz_classics
library(tidyverse)
library(rvest)
library(stringr)
library(scales)
library(dplyr)
library(rvest)
library(tidyverse)
library(rvest)
library(stringr)
library(scales)
library(dplyr)
library(ggplot2)
library(rvest)
yearly_avg_ratings <- final_data %>%
group_by(Year) %>%
summarise(Average_Rating = mean(Rating, na.rm = TRUE))
# Scatter plot oluşturma
ggplot(yearly_avg_ratings, aes(x = Year, y = Average_Rating)) +
geom_point() +
theme_minimal() +
labs(title = "Yıllara Göre Ortalama Rating", x = "Yıl", y = "Ortalama Rating")
ggplot(yearly_avg_ratings, aes(x = Year, y = Average_Rating)) +
geom_point() +
theme_minimal() +
labs(title = "Yıllara Göre Ortalama Rating", x = "Yıl", y = "Ortalama Rating")
ggplot(yearly_avg_ratings, aes(x = Year, y = Average_Rating)) +
geom_point() +
theme_minimal() +
labs(title = "Yearly Rating Averages ", x = "Yıl", y = "Average Rating")
ggplot(yearly_avg_ratings, aes(x = Year, y = Average_Rating)) +
geom_point() +
theme_minimal() +
labs(title = "Yearly Rating Averages ", x = "Year", y = "Average Rating")
ggplot(final_data, aes(x = as.factor(Year), y = Rating)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Yearly Rating Averages", x = "Year", y = "Average Rating") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
plot_scatter <- ggplot(yearly_avg_ratings, aes(x = Year, y = Average_Rating)) +
geom_point() +
theme_minimal() +
labs(title = "Yearly Rating Averages ", x = "Year", y = "Average Rating")
plot_box <- ggplot(final_data, aes(x = as.factor(Year), y = Rating)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Yearly Rating Averages", x = "Year", y = "Average Rating") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
plot_box
plot_scatter
grid.arrange(scatter_plot, box_plot, ncol = 2)
library(gridExtra)
grid.arrange(scatter_plot, box_plot, ncol = 2)
grid.arrange(plot_box, plot_scatter, ncol = 2)
plot_comparison <- grid.arrange(plot_box, plot_scatter, ncol = 2)
plot_comparison
plot_comparison
grid.arrange(plot_box, plot_scatter, ncol = 2)
plot_box
correlation_votes_ratings <- cor(final_data$Votes, final_data$Ratings, use = "complete.obs")
correlation_votes_ratings <- cor( x = final_data$Votes, y = final_data$Ratings, use = "complete.obs")
correlation_coefficient <- cor(final_data$Votes, final_data$Ratings, use = "complete.obs")
ggplot(final_data, aes( Duration, Rating)) +
geom_point(alpha = 0.5)+
scale_x_log10() +
theme_minimal()+
labs(title = "Correlation Between Ratings and Vote")
ggplot(final_data, aes( Duration, Rating)) +
geom_point(alpha = 0.5)+
geom_smooth(method = "lm", color = "blue")
scale_x_log10() +
theme_minimal()+
labs(title = "Correlation Between Ratings and Vote")
ggplot(final_data, aes( Duration, Rating)) +
geom_point(alpha = 0.5)+
geom_smooth(method = "lm", color = "yellow")
scale_x_log10() +
theme_minimal()+
labs(title = "Correlation Between Ratings and Vote")
ggplot(final_data, aes( Duration, Rating)) +
geom_point(alpha = 0.5)+
geom_smooth(method = "lm", color = "red")
scale_x_log10() +
theme_minimal()+
labs(title = "Correlation Between Ratings and Vote")
ggplot(final_data, aes( Duration, Rating)) +
geom_point(alpha = 0.5)+
geom_smooth(method = "lm", color = "red")+
scale_x_log10() +
theme_minimal()+
labs(title = "Correlation Between Ratings and Vote")
ggplot(final_data, aes( Duration, Rating)) +
geom_point(alpha = 0.5)+
geom_smooth(method = "lm", color = "red")+
#scale_x_log10() +
theme_minimal()+
labs(title = "Correlation Between Ratings and Vote")
ggplot(final_data, aes( Duration, Rating)) +
geom_point(alpha = 0.5)+
geom_smooth(method = "lm", color = "red")+
scale_x_log10() +
theme_minimal()+
labs(title = "Correlation Between Ratings and Vote")
ggplot(final_data, aes( Votes, Rating)) +
geom_point(alpha = 0.5)+
geom_smooth(method = "lm", color = "red")+
scale_x_log10() +
theme_minimal()+
labs(title = "Correlation Between Ratings and Vote")
ggplot(final_data, aes( Vote, Rating)) +
geom_point(alpha = 0.5)+
geom_smooth(method = "lm", color = "red")+
scale_x_log10() +
theme_minimal()+
labs(title = "Correlation Between Ratings and Vote")
ggplot(final_data, aes( Duration, Rating)) +
geom_point(alpha = 0.5)+
geom_smooth(method = "lm", color = "yellow")+
scale_x_log10() +
theme_minimal()+
labs(title = "Correlation Between Ratings and Durations")
correlation_coefficient <- cor(final_data$Votes, final_data$Ratings, method = "pearson",use = "complete.obs")
res <- cor.test(final_data$Vote, final_data$Rating,
method = "pearson")
res
cor_vote_duration <- cor.test(final_data$Vote, final_data$Duration,
method = "pearson")
cor_vote_ratings <- cor.test(final_data$Vote, final_data$Rating,
method = "pearson")
cor_vote_duration
cor_vote_duration <- cor.test(final_data$Vote, final_data$Duration,
method = "pearson")
cor_vote_ratings <- cor.test(final_data$Vote, final_data$Rating,
method = "pearson")
cor_vote_duration
cor_vote_ratings
url_top1000 <- "https://m.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR"
read_html(url_top1000)
url_top1000 <- "https://m.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR"
data_top1000 <- read_html(url_top1000)
title_top100 <- html_text(html_nodes(page, '.ipc-title__text'))
titles_top1000 <- lapply(urls, function(url) {
page <- read_html(url_top1000, encoding = "UTF-8")
titles_nodes <- html_nodes(page, '.ipc-title__text')  # Title için CSS seçicisi
titles <- html_text(titles_nodes)
return(titles)
})
titles_top1000
titles_top1000 <- titles_top1000[!grepl("Advanced", titles_top1000)]
titles_top1000 <- titles_top1000[!grepl("Recently", titles_top1000)]
titles_top1000
titles_top1000 <- titles_top1000[!grepl("Advanced", titles_top1000)]
titles_top1000 <- titles_top1000[!grepl("Recently", titles_top1000)]
Sys.setlocale("LC_ALL", "en_US.UTF-8")
titles_top1000 <- titles_top1000[!grepl("Advanced", titles_top1000)]
titles_top1000 <- titles_top1000[!grepl("Recently", titles_top1000)]
titles_top1000
final_data
titles_top1000
titles_top1000 <- lapply(urls, function(url) {
page <- read_html(url_top1000, encoding = "UTF-8")
titles_nodes <- html_nodes(page, '.ipc-title__text')  # Title için CSS seçicisi
titles <- html_text(titles_nodes)
return(titles)
})
titles_top1000
titles_top1000 <- titles_top1000[!grepl("Advanced", titles_top1000)]
titles_top1000 <- titles_top1000[!grepl("Recently", titles_top1000)]
titles_top1000
unlist(titles_top1000)
titles_top1000 <- lapply(urls, function(url) {
page <- read_html(url_top1000, encoding = "UTF-8")
titles_nodes <- html_nodes(page, '.ipc-title__text')  # Title için CSS seçicisi
titles <- html_text(titles_nodes)
return(titles)
})
titles_top1000
all_titles
titles_top1000 <- titles_top1000[!grepl("Advanced", titles_top1000)]
titles_top1000
titles_top1000 <- lapply(urls, function(url) {
page <- read_html(url_top1000, encoding = "UTF-8")
titles_nodes <- html_nodes(page, '.ipc-title__text')  # Title için CSS seçicisi
titles <- html_text(titles_nodes)
return(titles)
titles_top1000
titles_top1000 <- lapply(urls, function(url) {
page <- read_html(url_top1000, encoding = "UTF-8")
titles_nodes <- html_nodes(page, '.ipc-title__text')  # Title için CSS seçicisi
titles <- html_text(titles_nodes)
return(titles)
})
titles_top1000
library(tidyverse)
library(rvest)
library(stringr)
library(scales)
library(dplyr)
library(ggplot2)
library(rvest)
library(gridExtra)
titles_top1000 <- lapply(urls, function(url) {
page <- read_html(url_top1000, encoding = "UTF-8")
titles_nodes <- html_nodes(page, '.ipc-title__text')  # Title için CSS seçicisi
titles <- html_text(titles_nodes)
return(titles)
})
titles_top1000 <- titles_top1000[!grepl("Advanced", titles_top1000)]
titles_top1000
titles_top1000 <- titles_top1000[!grepl("Advanced", titles_top1000)]
titles_top1000 <- lapply(urls, function(url) {
page <- read_html(url_top1000, encoding = "UTF-8")
titles_nodes <- html_nodes(page, '.ipc-title__text')  # Title için CSS seçicisi
titles <- html_text(titles_nodes)
return(titles)
})
titles_top1000
titles_top1000 <- titles_top1000[-c(1, length(titles_top1000))]
titles_top1000
str(titles_top1000_updated)
str(titles_top1000)
titles_top1000_cleaned <- c()
for (x in titles_top1000) {
a <- gsub("^[0-9]+\\.\\s*", "", x)
titles_top1000_cleaned <- c(titles_top1000_cleaned, a)
}
titles_top1000_cleaned
titles_top1000 <- lapply(urls, function(url) {
page <- read_html(url_top1000, encoding = "UTF-8")
titles_nodes <- html_nodes(page, '.ipc-title__text')  # Title için CSS seçicisi
titles <- html_text(titles_nodes)
return(titles)
})
titles_top1000
titles_top1000_cleaned <- c()
for (x in titles_top1000) {
a <- gsub("^[0-9]+\\.\\s*", "", x)
titles_top1000_cleaned <- c(titles_top1000_cleaned, a)
}
titles_top1000_cleaned
titles_top1000_cleaned <- titles_top1000_cleaned[!grepl("Advanced", titles_top1000_cleaned)]
titles_top1000_cleaned <- titles_top1000_cleaned[!grepl("Recently", titles_top1000_cleaned)]
titles_top1000_cleaned
titles_top1000_cleaned
titles_top1000 <- lapply(urls, function(url) {
page <- read_html(url_top1000, encoding = "UTF-8")
titles_nodes <- html_nodes(page, '.ipc-title__text')  # Title için CSS seçicisi
titles <- html_text(titles_nodes)
return(titles)
titles_top1000
titles_top1000
titles_top1000 <- lapply(urls, function(url) {
page <- read_html(url_top1000, encoding = "UTF-8")
titles_nodes <- html_nodes(page, '.ipc-title__text')  # Title için CSS seçicisi
titles <- html_text(titles_nodes)
return(titles)
})
titles_top1000
library(tidyverse)
library(rvest)
library(stringr)
library(scales)
library(dplyr)
library(ggplot2)
library(rvest)
library(gridExtra)
Sys.setlocale("LC_ALL", "en_US.UTF-8")
titles_top1000 <- lapply(urls, function(url) {
page <- read_html(url_top1000, encoding = "UTF-8")
titles_nodes <- html_nodes(page, '.ipc-title__text')  # Title için CSS seçicisi
titles <- html_text(titles_nodes)
return(titles)
})
titles_top1000
titles_top1000_cleaned <- titles_top1000_cleaned[!grepl("Advanced", titles_top1000_cleaned)]
titles_top1000_cleaned <- titles_top1000_cleaned[!grepl("Recently", titles_top1000_cleaned)]
titles_top1000_cleaned
titles_top1000 <- lapply(urls, function(url) {
page <- read_html(url_top1000, encoding = "UTF-8")
titles_nodes <- html_nodes(page, '.ipc-title__text')  # Title için CSS seçicisi
titles <- html_text(titles_nodes)
return(titles)
})
titles_top1000
titles_top1000 <- titles_top1000[!grepl("Advanced", titles_top1000)]
titles_top1000 <- titles_top1000[!grepl("Recently", titles_top1000)]
titles_top1000
titles_top1000 <- lapply(urls, function(url) {
page <- read_html(url_top1000, encoding = "UTF-8")
titles_nodes <- html_nodes(page, '.ipc-title__text')  # Title için CSS seçicisi
titles <- html_text(titles_nodes)
return(titles)
})
titles_top1000_cleaned <- c()
for (x in titles_top1000) {
a <- gsub("^[0-9]+\\.\\s*", "", x)
titles_top1000_cleaned <- c(titles_top1000_cleaned, a)
}
titles_top1000_cleaned <- titles_top1000_cleaned[!grepl("Advanced", titles_top1000_cleaned)]
titles_top1000_cleaned <- titles_top1000_cleaned[!grepl("Recently", titles_top1000_cleaned)]
titles_top1000_cleaned
titles_top1000_unique <- unique(titles_top1000_cleaned)
titles_top1000_unique
titles_top1000_cleaned <- unique(titles_top1000_cleaned)
titles_top1000_cleaned
