---
title: "Assignment 1"
---

My first assignment has four parts.

## (A)

The video I chose --\> [https://www.youtube.com/watch?v=mrvhk2XUfWo](#0)

The Summary:

The video is about capabilities of Quarto. Quarto is the next generation of RMarkdown for any data scientist. It aims to be language-agnostic tool that can work with anything that becomes popular. It is an open-source publishing system. Quarto has commands like render-preview-publish which is used for render documents and publish it for locally or to websites which can be updateable.

The biggest difference between RMarkdown and Quarto is that you can use Quarto even though you don't have R, in addition to that, Quarto also extends to other languages. You can also switch between other languages which makes it very flexible.

Other big difference is when you download R Studio, you also have access to Quarto. You also get different formats like websites, blogs or books once you installed Quarto.

Quarto has a comfort of your own system and you can still collobrate across a document with a shared syntax. RMarkdown will be maintained but it is possible to render RMarkdown documents in Quarto. You can also add extensions to Quarto like short codes, filters, formats etc.

## (B)

::: {style="color: green"}
First, I need to note that I used ChatGPT to help me. I asked it to the same question I have. I also asked it to give simple examples so that it could be more understandable. I also regenerated some answers and finally I got the optimal results as far as I could. In the end I changed the desciptions to summaries.
:::

The first and the most obvious difference is that the operator sign in R is "\<-" and "="in Pyhton.

Example in R:

```{r}

x <- 10

x
```

Example in Python:

```{python}

x = 10

print(x)
```

The second difference is vectorized operations. R is optimized for vectorized operations but you have use libraries for doing that.

Example in R:

```{r}
x <- c(1, 2, 3)

y <- c(4, 5, 6)

result <- x + y

result
```

Example in Python:

```{python}

x = [1, 2, 3]
y = [4, 5, 6]

result = [a + b for a, b in zip(x, y)]

print(result)

```

The third difference is loop convenience. Pyhton has traditional for and while loops but R has "apply" family of functions which makes it easier.

Example in R:

```{r}

data <- c(1, 2, 3, 4, 5)

squared_data <- sapply(data, function(x) x^2)

squared_data
```

Example in Python:

```{python}
data = [1, 2, 3, 4, 5]

squared_data = [x**2 for x in data]

print(squared_data)

```

## (C)

```{r}

library(dslabs)
data(na_example)
na_example
sum(is.na(na_example))
no_nas <- ifelse(is.na(na_example), 0, na_example)
no_nas
sum(is.na(no_nas))
```

## (D)

It is synced to GitHub.
